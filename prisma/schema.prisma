datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @default("default_username")
  password          String    @default("default_password")
  firstName         String?
  lastName          String?
  birthDate         DateTime?
  registrationDate  DateTime  @default(now())
  accountStatus     String    @default("inactive")
  email             String    @unique
  phoneNumber       String?

  customer          Customer?
  teller            Teller?
  chats             Chat[]
}

model Customer {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  profilePic String?

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  prediction PredictionAttribute?
  sessions   Session[]
  payments   Payment[]
  reports    Report[]
}

model PredictionAttribute {
  id           Int     @id @default(autoincrement())
  customerId   Int     @unique
  birthPlace   String?
  birthTime    String?
  zodiacSign   String?
  career       String?
  relationship String?

  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Teller {
  id                   Int      @id @default(autoincrement())
  userId               Int      @unique
  profilePic           String?
  identificationCard   String?
  identificationNumber String?
  bankName             String?
  bankAccountNumber    String?
  specialty            String[]
  bio                  String?
  verificationStatus   String?
  traffic              Int?

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  packages             TellerPackage[]
  sessions             Session[]
  reports              Report[]
}

model TellerPackage {
  id            Int     @id @default(autoincrement())
  tellerId      Int
  packageDetail String?
  questionNumber Int?
  price         Float
  status        String  @default("Active")

  teller        Teller  @relation(fields: [tellerId], references: [id], onDelete: Cascade)
  payments      Payment[]
}

model Payment {
  id             Int      @id @default(autoincrement())
  customerId     Int
  packageId      Int
  sessionId      Int      @unique
  paymentEvidence String?
  createdAt      DateTime @default(now())
  status         String

  customer       Customer     @relation(fields: [customerId], references: [id])
  package        TellerPackage @relation(fields: [packageId], references: [id])
  session        Session      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Session {
  id            Int      @id @default(autoincrement())
  customerId    Int
  tellerId      Int
  createdAt     DateTime @default(now())
  endedAt       DateTime?
  sessionStatus String
  paymentId     Int?      @unique

  customer      Customer  @relation(fields: [customerId], references: [id])
  teller        Teller    @relation(fields: [tellerId], references: [id])
  reviews       Review[]
  chats         Chat[]
  payment       Payment?
}

model Review {
  id         Int      @id @default(autoincrement())
  sessionId  Int
  rating     Int
  comment    String?
  reviewAt   DateTime @default(now())

  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Chat {
  id         Int      @id @default(autoincrement())
  sessionId  Int
  senderId   Int
  content    String
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)

  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Report {
  id           Int      @id @default(autoincrement())
  customerId   Int
  tellerId     Int
  reportReason String
  reportEvidence String?
  reportType   String?
  createdAt    DateTime @default(now())
  status       String

  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  teller       Teller   @relation(fields: [tellerId], references: [id], onDelete: Cascade)
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @default("default_admin_username")
  password String @default("default_admin_username")
  email    String @unique
}
